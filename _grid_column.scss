/* =======================================*/
/*
/* GRID
/*
/* =======================================*/

@mixin column($fraction: null, $cycle: null, $gutter: null, $behavior: null, $important: null) {


  // TODO:
  // - Check String (done)
  //
  // - If String: Split String Method (done)
  //    - No Gutters fraction         (done)
  //    - No Gutters px               (done)
  //    - No Gutters auto             (done)
  //    - Gutters fraction            (done)
  //    - Gutters px                  (done)           
  //    - Gutters auto                (done)
  //
  // - If Number: use numbers
  //    - No Gutters fraction         (done) (disabled)    
  //    - No Gutters px               (done) (disabled)
  //    - No Gutters auto
  //    - Gutters fraction
  //    - Gutters px               
  //    - Gutters auto
  //
  // - Responsive Overrides


  //=====================================*/
  // CHECK FOR STRING OR NUMBER
  //=====================================*/
  // IF STRING...
  @if (type_of($fraction) == string) {
    //--------------------------------------DEBUG
    // background: #f1f1f1 !important;
    // &::before{content: 'str, fr: #{$fraction}';}
    @if ($cycle == null) {
      &::before{content: 'column(\'#{$fraction}\')';display: block;width: 100%; margin-right: -200px;}
    }
    @else {
      &::before{content: 'column(\'#{$fraction}, $cycle: #{$cycle}\')';display: block;width: 100%; margin-right: -200px;}
    } 
    //--------------------------------------DEBUG

    // ...is a fraction...
    @if (str-index($fraction, '/') != null) {
      $separator: str-index($fraction, '/');
      $nominator: str-slice($fraction, 0, $separator - 1);
      $denominator: str-slice($fraction, $separator + 1);
      $fraction-result: _str-to-number($nominator) / _str-to-number($denominator);
    }
    // ...is 'auto'...
    @else if ($fraction == 'auto') {
      $nominator: null;
      $denominator: null;
      $fraction-result: 'auto';
    }
    // ...is a value (e.g. 10px)...
    @else {
      $nominator: null;
      $denominator: null;
      $fraction-result: _str-to-number($fraction);
    } 
  }
  // IF NUMBER...
  @else if (type_of($fraction) == number) {
    //--------------------------------------DEBUG
    // background: blue !important;
    // &::before{content: 'num, fr: #{$fraction}';}
    //--------------------------------------DEBUG

    // $nominator: null;
    // $denominator: null;
    // $fraction-result: $fraction;

    @error "HFC RELAY ERROR --> The Column Mixin only accepts a string as the first parameter. --> Examples: @include column('1/3'); or @include column('10px');";
  }


  //=====================================*/
  // CHECK FOR IMPORTANT
  //=====================================*/
  @if ($important == true) {
    $important: !important;
  }
  
  //=====================================*/
  // CHECK FOR CYCLE
  //=====================================*/
  @if ($cycle != null) {
    $denominator: $cycle;
  }
  
  //=====================================*/
  // CHECK FOR GUTTER "TRUE"
  //=====================================*/
  @if ($gutter == true) {
    $gutter: $whitespace;
  }




  //=====================================*/
  //
  // NO GUTTERS
  //
  //=====================================*/
  @if ($gutter == 0px or $gutter == false or $gutter == null) {
    
    //=====================================*/
    // FRACTION WIDTH
    //=====================================*/
    @if ($fraction-result != 'auto' and $fraction-result <= 1) {
      width: calc(99.999999% * (#{$fraction})) $important; 
      flex: none; //For: override auto columns
    }
    //=====================================*/
    // VALUE WIDTH
    //=====================================*/
    @else if ($fraction-result != 'auto' and $fraction-result > 1) {
      width: #{$fraction} $important;
      flex: none; //For: override auto columns
    }
    //=====================================*/
    // AUTO WIDTH
    //=====================================*/
    @else if ($fraction-result == 'auto') {
      flex: 1;
    }
    //=====================================*/
    // GRID LOGIC
    //=====================================*/
    &:nth-child(1n) {
      float: left;
      clear: none;
    }
    &:last-child {
      margin-right: 0;
    }
    // Check for $denominator...
    @if ($denominator != null) {
      &:nth-child(#{$denominator}n) {
        margin-right: 0;
      }
      &:nth-child(#{$denominator}n + 1) {
        clear: both;
      }
    }

  }


  //=====================================*/
  //
  // WITH GUTTERS
  //
  //=====================================*/
  @else {

    //=====================================*/
    // FRACTION WIDTH
    //=====================================*/
    @if ($fraction-result != 'auto' and $fraction-result <= 1) {
      width: calc(99.999999% * (#{$fraction}) - (#{$gutter} - #{$gutter} * (#{$fraction}))) $important;
      flex: none; //For: override auto columns
    }
    //=====================================*/
    // VALUE WIDTH
    //=====================================*/
    @else if ($fraction-result != 'auto' and $fraction-result > 1) {
      width: #{$fraction} $important;
      flex: none; //For: override auto columns
    }
    //=====================================*/
    // AUTO WIDTH
    //=====================================*/
    @else if ($fraction-result == 'auto') {
      flex: 1;
    }
    //=====================================*/
    // GRID LOGIC
    //=====================================*/
    &:nth-child(1n) {
      float: left;
      margin-right: $gutter;
      margin-bottom: $gutter;
      clear: none;
    }
    &:last-child {
      margin-right: 0;
    }
    // Check for $denominator...
    @if ($denominator != null) {
      &:nth-child(#{$denominator}n) {
        margin-right: 0;
      }
      &:nth-child(#{$denominator}n + 1) {
        clear: both;
      }
    }

  }


  //=====================================*/
  //
  // BEHAVIOR
  //
  //=====================================*/
  @if ($behavior == stacking) {
    @include respond-below(m) {
      flex: auto;
      width: 100% $important;
      margin-left: 0 !important;
      margin-right: 0 !important;
    }
  }
}